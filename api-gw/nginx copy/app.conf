js_include conf.d/introspect.js;

# It is possible to combine this with OpenID Connect by using auth_jwt and auth_request in the same location.

# map $http_authorization $access_token {
#     "~*^bearer (.*)$" $1;
#     default $http_authorization;
# }

# This is where token introspection responses will be stored if proxy_cache is enabled
# proxy_cache_path /var/cache/nginx/tokens levels=1 keys_zone=token_responses:1m max_size=10m;

server {
    listen 8090; # Use TLS in production

    # OAuth 2.0 Token Introspection configuration
    # resolver 127.0.0.11 ipv6=off;                  # For DNS lookup of OAuth server
    subrequest_output_buffer_size 16k; # To fit a complete response from OAuth server
    # error_log /var/log/nginx/error.log debug; # Enable to see introspection details

    #set $access_token $http_apikey; # Where to find the token. Remove when using Authorization header
    set $oauth_token_endpoint     "http://172.17.0.1:8080/auth/realms/local/protocol/openid-connect/token";
    # set $oauth_token_hint         "access_token"; # E.g. access_token, refresh_token
    set $oauth_client_id            "apigateway"; # Will use HTTP Basic authentication unless empty
    set $oauth_client_secret        "084fec6b-2c2e-401c-b28a-30708c911d4e"; # If id is empty this will be used as a bearer token
    set $oauth_grant_type           "urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange";

    location / {
        # proxy_set_header ApiKey $apiKeyParam;
        auth_request /_oauth2_token_introspection;

        # Any member of the token introspection response is available as $sent_http_token_member
        auth_request_set $tokenContext $sent_http_token_tokenContext;
        proxy_set_header Authorization $tokenContext;

        proxy_pass http://host.docker.internal:3000;
        # proxy_pass http://backend$route$is_args$args;
    }

    location = /_oauth2_token_introspection {
        # This location implements an auth_request server that uses the JavaScript
        # module to perform the token introspection request.
        internal;
        js_content introspectApiKey;
    }

    # location = /_oauth2_token_introspection {
    #     # This location implements an auth_request server that uses the JavaScript
    #     # module to perform the token introspection request.
    #     internal;
    #     js_content introspectApiKey;
    # }

    location = /_oauth2_send_request {
        internal;
        proxy_method      POST;
        # proxy_set_header  Authorization "Bearer SecretForOAuthServer";
        proxy_set_header  Content-Type "application/x-www-form-urlencoded";
        proxy_set_body    "grant_type=$oauth_grant_type&requested_subject=$arg_apiKeyCtx&client_id=$oauth_client_id&client_secret=$oauth_client_secret";
        proxy_pass        $oauth_token_endpoint;

        # proxy_cache           token_responses; # Enable caching
        # proxy_cache_key       $arg_apiKeyCtx;   # Cache for each access token
        # proxy_cache_lock      on;              # Duplicate tokens must wait
        # proxy_cache_valid     200 10s;         # How long to use each response
        # proxy_ignore_headers  Cache-Control Expires Set-Cookie;
    }
}

# vim: syntax=nginx